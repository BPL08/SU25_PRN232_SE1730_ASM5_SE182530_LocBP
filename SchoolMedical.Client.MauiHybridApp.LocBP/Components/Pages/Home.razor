@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@implements IDisposable
@inject HttpClient Http

<h3>Medical Report Form</h3>

<EditForm Model="@Medical" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="mb-3">
                <label class="form-label">Medical Report ID</label>
                <InputNumber class="form-control" @bind-Value="Medical.MedicalReportsLocBpid" disabled="@IsUpdateMode" />
                @if (IsDuplicateId && !IsUpdateMode)
                {
                    <div class="text-danger">ID already exists. Please enter a unique ID.</div>
                }
            </div>
            <div class="mb-3">
                <label class="form-label">Student Profile ID</label>
                <InputNumber class="form-control" @bind-Value="Medical.FkStudentProfileLocBpid" />
            </div>
            <div class="mb-3">
                <label class="form-label">Incident Date</label>
                <InputDate class="form-control" @bind-Value="Medical.IncidentDate" />
            </div>
            <div class="mb-3">
                <label class="form-label">Location</label>
                <InputText class="form-control" @bind-Value="Medical.Location" />
            </div>
            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputText class="form-control" @bind-Value="Medical.Description" />
            </div>
            <div class="mb-3">
                <label class="form-label">Action Taken</label>
                <InputText class="form-control" @bind-Value="Medical.ActionTaken" />
            </div>
            <div class="mb-3">
                <label class="form-label">Reported Date</label>
                <InputDate class="form-control" @bind-Value="Medical.ReportedDate" />
            </div>
            <div class="mb-3">
                <label class="form-label">Witness Name</label>
                <InputText class="form-control" @bind-Value="Medical.WitnessName" />
            </div>
            <div class="mb-3 form-check">
                <InputCheckbox class="form-check-input" @bind-Value="Medical.ParentNotified" />
                <label class="form-check-label">Parent Notified</label>
            </div>
            <div class="mb-3">
                <label class="form-label">Resolution Date</label>
                <InputDate class="form-control" @bind-Value="Medical.ResolutionDate" />
            </div>
            <div class="mb-3 form-check">
                <InputCheckbox class="form-check-input" @bind-Value="Medical.Status" />
                <label class="form-check-label">Status</label>
            </div>
            <div class="mb-3">
                <label class="form-label">Severity Level</label>
                <InputNumber class="form-control" @bind-Value="Medical.SeverityLevel" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@(!IsUpdateMode && IsDuplicateId)">
                @(IsUpdateMode ? "Update" : "Submit")
            </button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="ClearForm">Clear</button>
            <span class="text-danger ms-3">@Message</span>
        </div>
    </div>
</EditForm>

<hr />

<h4>All Medical Reports</h4>
<div class="table-responsive">
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-primary text-nowrap">
            <tr>
                <th>ID</th>
                <th>StudentProfileID</th>
                <th>Incident</th>
                <th>Location</th>
                <th>Description</th>
                <th>Action</th>
                <th>Reported</th>
                <th>Witness</th>
                <th>Parent</th>
                <th>Resolved</th>
                <th>Status</th>
                <th>Severity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in MedicalReports)
            {
                <tr>
                    <td>@item.MedicalReportsLocBpid</td>
                    <td>@item.FkStudentProfileLocBpid</td>
                    <td>@item.IncidentDate.ToShortDateString()</td>
                    <td>@item.Location</td>
                    <td>@item.Description</td>
                    <td>@item.ActionTaken</td>
                    <td>@item.ReportedDate.ToShortDateString()</td>
                    <td>@item.WitnessName</td>
                    <td>@(item.ParentNotified ? "Yes" : "No")</td>
                    <td>@(item.ResolutionDate?.ToShortDateString() ?? "-")</td>
                    <td>@(item.Status ? "Resolved" : "Unresolved")</td>
                    <td>@item.SeverityLevel</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-1" @onclick="() => LoadForEdit(item)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteReport(item.MedicalReportsLocBpid)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private MedicalReportsLocBp Medical = new();
    private List<MedicalReportsLocBp> MedicalReports = new();
    private string Message = "";
    private bool IsUpdateMode = false;

    private bool IsDuplicateId => MedicalReports.Any(m => m.MedicalReportsLocBpid == Medical.MedicalReportsLocBpid);

    protected override async Task OnInitializedAsync() => await LoadData();

    private async Task LoadData()
    {
        try
        {
            var handler = new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                };
            using var http = new HttpClient(handler);
            var result = await http.GetFromJsonAsync<List<MedicalReportsLocBp>>("https://10.0.2.2:7261/MedicalReportLocBps");
            if (result != null)
                MedicalReports = result;
        }
        catch (Exception ex)
        {
            Message = $"Load error: {ex.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var handler = new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                };
            using var http = new HttpClient(handler);

            var payload = JsonSerializer.Serialize(Medical);
            var content = new StringContent(payload, Encoding.UTF8, "application/json");

            HttpResponseMessage response;
            if (IsUpdateMode)
            {
                response = await http.PutAsync($"https://10.0.2.2:7261/MedicalReportLocBps/{Medical.MedicalReportsLocBpid}", content);
            }
            else
            {
                if (IsDuplicateId)
                {
                    Message = "ID already exists.";
                    return;
                }
                response = await http.PostAsync("https://10.0.2.2:7261/MedicalReportLocBps", content);
            }

            if (response.IsSuccessStatusCode)
            {
                Message = IsUpdateMode ? "Updated successfully!" : "Submitted successfully!";
                await LoadData();
                Medical = new();
                IsUpdateMode = false;
            }
            else
            {
                Message = "Operation failed!";
            }
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    private void LoadForEdit(MedicalReportsLocBp item)
    {
        Medical = new MedicalReportsLocBp
            {
                FkStudentProfileLocBpid = item.FkStudentProfileLocBpid,
                MedicalReportsLocBpid = item.MedicalReportsLocBpid,
                IncidentDate = item.IncidentDate,
                Location = item.Location,
                Description = item.Description,
                ActionTaken = item.ActionTaken,
                ReportedDate = item.ReportedDate,
                WitnessName = item.WitnessName,
                ParentNotified = item.ParentNotified,
                ResolutionDate = item.ResolutionDate,
                Status = item.Status,
                SeverityLevel = item.SeverityLevel
            };
        IsUpdateMode = true;
    }

    private void ClearForm()
    {
        Medical = new();
        IsUpdateMode = false;
        Message = "";
    }

    private async Task DeleteReport(int id)
    {
        try
        {
            var handler = new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                };
            using var http = new HttpClient(handler);
            var response = await http.DeleteAsync($"https://10.0.2.2:7261/MedicalReportLocBps/{id}");

            if (response.IsSuccessStatusCode)
            {
                Message = "Deleted successfully!";
                await LoadData();
            }
            else
            {
                Message = "Failed to delete!";
            }
        }
        catch (Exception ex)
        {
            Message = $"Delete error: {ex.Message}";
        }
    }

    public void Dispose() { }

    public class MedicalReportsLocBp
    {
        public int FkStudentProfileLocBpid { get; set; }
        public int MedicalReportsLocBpid { get; set; }
        public DateTime IncidentDate { get; set; }
        public string Location { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string ActionTaken { get; set; } = string.Empty;
        public DateTime ReportedDate { get; set; }
        public string WitnessName { get; set; } = string.Empty;
        public bool ParentNotified { get; set; }
        public DateTime? ResolutionDate { get; set; }
        public bool Status { get; set; }
        public int SeverityLevel { get; set; }
    }
}
